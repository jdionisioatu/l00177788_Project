name: DevOps Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
    types: [ open, synchronize, reopened ]

jobs:
  code_scanning:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, csharp
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  build_and_test:
    needs: code_scanning
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '6.0', '8.0' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    - name: Restore dependencies
      run: dotnet restore CodeScanning
    - name: Build
      run: dotnet build --no-restore CodeScanning
    - name: Run Unit Tests
      run: dotnet test --no-build --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}" CodeScanning
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-results-${{ matrix.dotnet-version }}
        path: TestResults-${{ matrix.dotnet-version }}
      if: ${{ always() }}
    
    
  create_images:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Login to Github Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Create prod image from repository
      uses: docker/build-push-action@v5.1.0
      if: github.ref == 'refs/heads/main'
      with:
        context: ./CodeScanning
        file: ./CodeScanning/Dockerfile
        secret-envs: env=prod, DB_PASS=${{ secrets.DB_PASS_PROD }}, DB_USER=${{ secrets.DB_USER_PROD }}
        tags: prod
    - name: Create dev image from repository
      uses: docker/build-push-action@v5.1.0
      if: github.ref == 'refs/heads/dev'
      with:
        context: ./CodeScanning
        file: ./CodeScanning/Dockerfile
        secret-envs: env=dev, DB_PASS={{ secrets.DB_PASS_DEV }}, DB_USER={{ secrets.DB_USER_DEV }}
        tags: dev

  deploy_to_dev:
    needs: create_images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Deploy dev to on-perm server
        uses: garygrossgarten/github-action-ssh@0.7.0
        with:
          command: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u jdionisioatu --password-stdin; docker pull ghcr.io/jdionisioatu/dev:latest; docker run -p 127.0.0.1:8090:8080/tcp dev
          host: ${{ secrects.HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          privateKey: ${{ secrets.SSH_PRIV_KEY }}

  deploy_to_prod:
    needs: create_images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy dev to on-perm server
        uses: garygrossgarten/github-action-ssh@0.7.0
        with:
          command: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u jdionisioatu --password-stdin; docker pull ghcr.io/jdionisioatu/prod:latest; docker run -p 127.0.0.1:8100:8080/tcp prod
          host: ${{ secrects.HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          privateKey: ${{ secrets.SSH_PRIV_KEY }}

